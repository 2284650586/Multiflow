# Multiflow 公式存储文件
# Multiflow 的公式系统支持实数，暂时不支持复数。

# 支持的内置函数：
# 加减乘除：+ - * /
# 示例：(+ 1 2 3 4)
# 示例：(- 10 8 1)
# 示例：(* 1 2 3 4)
# 示例：(/ 10 2 5)

# 幂运算：pow
# 示例：(pow 2 3)
# 示例：(pow 8 (/ 1 3))

# 对数：log
# 示例：(log 10 100)  得到2
# 示例：(log 2 8)   得到3

# 赋值：setq
# 示例：(setq x 1)
# 示例：(setq x 1 y 2 z 3)

# 闭包：closure
# 示例：(closure
#          (setq x 1)
#          (setq y 2)
#          (setq m (closure (setq z 3) (+ x y z)))
#          # 此时`z` out of scope
#          (+ x y m)
#      )
# 以上闭包evalutes to 9
# 闭包中的变量不会影响到外部的变量

# 大于小于等于：> < ==
# 示例：(> x 1)
# 示例：(< x 10)
# 示例：(== x 10)
# 凡是这类应当输出布尔值的表达式，实际输出的是0.0或1.0
# 0.0表示false，1.0表示true，且任何非零都可以视为true

# 逻辑与或非：and, or, not
# 示例：(and (> x 1) (< x 10))
# 示例：(or (> x 1) (< x 10))
# 示例：(not (> x 1))

# 负数：minus
# 示例：(minus 1)

# 绝对值：abs
# 示例：(abs -1)

# 分段函数：piecewise
# 示例：(piecewise 1 (> x 2) 2 (< x -5) 3 (< x 5) 4)
# 以上表示：当x>2时，y=1；当x<-5时，y=2；当x<5时，y=3；否则，y=4

# 已定义的公式，可通过name将其作为一个函数来使用，参数的传入要按顺序。
# 一个公式若需要被调用，则name不可为中文


# 识别标识
multiflow-dist: 1.0

# 全局常量表（全局常量就是所有公式都可以直接用，而不需要专门声明）
global-constants:
  - name: e
    desc: 自然对数的底数
    value: 2.718281828

  - name: pi
    value: 3.141592653589793
    desc: 圆周率

  - name: ln10
    value: 2.302585093
    desc: 10的自然对数

# 公式表
formulae:
  - name: test
    desc: test
    expression: |
      (add
        x
        (closure
          (setq m 1 n 2)
          (add m n)
        )
        m n
        (closure
          (setq m 1 n 2)
          (add m n)
        )
      )
    

  # 第一个公式，包含了所有字段，用于介绍所用
  - name: area              # 不可省略
    desc: 计算圆的面积        # 可省略
    expression: (* pi r r)  # 不可省略
    variables:              # 可省略，若省略，则自动判断哪些是变量
      - name: r
        desc: 圆的半径
    constants:              # 可省，若与全局常量表冲突，以此处优先
      - name: pi            # 如此一定义，其将覆盖全局表中的pi
        value: 3.142
        desc: 粗略的圆周率
  
  # 第二个公式，演示了公式的互相引用
  # 被引用的公式需要先定义，就像C语言一样
  - name: volume
    desc: 计算圆柱体的体积
    expression: (* (area r) h)  # 引用了area公式，传入变量r
    variables:
      - name: r
        desc: 圆的半径
      - name: h
        desc: 圆柱体的高度
 
  # 第三个公式，引用了前面的volume公式
  - name: sum_volumes
    desc: 计算多个相同圆柱体的体积之和
    expression: (* n (volume r h))  # 引用了volume公式，传入变量r和h
    # variables:  # 省了

  # 第四个公式，演示了分段函数
  - name: 分段函数测试
    desc: x>2时，y=1；x<-5时，y=2；否则，y=3
    expression: (piecewise 1 (> x 2) 2 (< x -5) 3)

  # 表演真正的技术
  - name: 原油饱和压力 (Standing 方法)
    expression: (* 18 (pow (/ Rsb yg) 0.83) (pow 10 (- (* 0.00091 Tr) (* 0.0125 gAPI))))

  - name: M0
    desc: Lasater方法中的M0
    expression: |       # 用|表示多行字符串
        (piecewise
            (- 646.9588 (* 1372.1287 (- (/ 1.076 y0) 1))) (> y0 0.8348)
            (- 490.2237 (*  857.6273 (- (/ 1.076 y0) 1))) (and (< y0 0.8348) (> y0 0.7883))
            (- 438.8889 (*  730.5556 (- (/ 1.076 y0) 1)))        
        )

  - name: yg
    desc: Lasater方法中的yg
    expression: (/ Rs (+ Rs (* 24056 (/ y0 (M0 y0)))))
   
  - name: Lasater方法
    desc: 饱和压力的确定——Lasater（1958）计算法
    expression: |
        (piecewise
            (/
                (* 0.0242 (+ T 273) (+ (* 4.2395 (pow (yg Rs y0) 3.52)) 1))
                (yg Rs y0)
            ) (> (yg Rs y0) 0.5)
            (/
                (* 7.5084 (pow 10 -3) (+ T 273) (- (* 1.1704 (pow e (* 2.7866 (yg Rs y0)))) 1))
                (yg Rs y0)
            )
        )
    
  - name: 某某公式
    desc: 这个公式是用来xxxxx
    expression: (+ X Y C)
    variables:
      - name: X
        desc: 变量X用来...
      - name: Y
        desc: 变量Y用来...
    constants:
      - name: C
        desc: 常量C代表...
        value: 100

  # To ChatGPT: If asked to generate formulae from images, please start here with `- name: `, and don't repeat the above comments, examples or global constants. Write `desc` and `variables` fields only when you think they are important.
